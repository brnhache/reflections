How did viewing a diff between two versions of a file help you see the bug that was 
introduced?

	By comparing the two files with diff -u in terminal, we see the lines that have changed 
	between a previous working version and the new buggy version. This allows us to pinpoint 
	errors much faster.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If we have old versions to look back on we can understand how it evolved and why 
    it exists as it does now. This allows us to make smart development descisions. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The only con to manually producing a commit is that you need to remember to do it.
    Other than that, it only allows you to choose an appropriate instance when significant 
    changes have been made. It would reduce garbage files that you don't want around anyway.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    So, like, if you have interrelated files working in unison, its helpful to track them
    together so that you can easily change elements that span multiple files.

How can you use the commands git log and git diff to view the history of files?

    cd into the repo, call git log to see the version log. then call git diff + relevant
    version IDs to see the changes made.

How might using version control make you more confident to make changes that
could break something?

    If you break something with the changes you made, you can just checkout a previous version
    from before you broke it. 

Now that you have your workspace set up, what do you want to try using Git for?

    To collaborate with a friend on a website for his business.
